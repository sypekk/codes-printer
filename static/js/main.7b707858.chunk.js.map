{"version":3,"sources":["Inputer.js","App.js","serviceWorker.js","index.js"],"names":["Inputer","_ref","changeTextFn","hideFn","addFn","titleFn","props","Object","objectWithoutProperties","react_default","a","createElement","disabled","off","className","placeholder","onChange","type","value","text","onClick","Item","item","concat","toUpperCase","App","state","list","title","handleButtonAdd","lista","_this","split","forEach","push","setState","handleButtonHide","handleChangeText","e","target","handleChangeTitle","Fragment","this","src_Inputer","assign","length","map","App_Item","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAYeA,EATC,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,aAAcC,EAAjBF,EAAiBE,OAAQC,EAAzBH,EAAyBG,MAAOC,EAAhCJ,EAAgCI,QAAYC,EAA5CC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,oDACdQ,EAAAC,EAAAC,cAAA,OAAKC,WAAUN,EAAMO,IAAoBC,UAAU,OACjDL,EAAAC,EAAAC,cAAA,SAAOI,YAAY,2BAAsBC,SAAUX,IACnDI,EAAAC,EAAAC,cAAA,SAAOI,YAAY,uBAAuBE,KAAK,OAAOD,SAAUd,EAAcgB,MAAOZ,EAAMa,OAC3FV,EAAAC,EAAAC,cAAA,UAAQS,QAAShB,GAAjB,SACAK,EAAAC,EAAAC,cAAA,UAAQS,QAASjB,GAAjB,WCHEkB,EAAO,SAACf,GAAD,OAAWG,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,YAAOL,EAAMgB,MAAYb,EAAAC,EAAAC,cAAA,QAAMG,UAAU,QAAhB,QAAAS,OAAiCjB,EAAMgB,KAAKE,cAA5C,QA0DrCC,6MAvDbC,MAAS,CACPP,KAAM,GACNQ,KAAM,GACNd,KAAK,EACLe,MAAO,MAGTC,gBAAkB,WAChB,IAAMC,EAAQC,EAAKL,MAAMC,KACZI,EAAKL,MAAMP,KACLa,MAAM,KAEnBC,QAAQ,SAAAX,GACAA,EAAKU,MAAM,MACnBC,QAAQ,SAAAX,GACVQ,EAAMI,KAAKZ,OAIfS,EAAKI,SAAS,CACZR,KAAMG,OAIVM,iBAAmB,WACjBL,EAAKI,SAAS,CACZtB,KAAK,OAITwB,iBAAmB,SAACC,GAClBP,EAAKI,SAAS,CACZhB,KAAMmB,EAAEC,OAAOrB,WAInBsB,kBAAoB,SAACF,GACnBP,EAAKI,SAAS,CACZP,MAAOU,EAAEC,OAAOrB,iFAKlB,OACET,EAAAC,EAAAC,cAACF,EAAAC,EAAM+B,SAAP,KACIC,KAAKhB,MAAMb,IAAsK,KAAhKJ,EAAAC,EAAAC,cAACgC,EAADpC,OAAAqC,OAAA,GAAaF,KAAKhB,MAAlB,CAAyBxB,aAAcwC,KAAKL,iBAAkBlC,OAAQuC,KAAKN,iBAAkBhC,MAAOsC,KAAKb,gBAAiBxB,QAASqC,KAAKF,qBAC1JE,KAAKhB,MAAME,MAAMiB,OAAS,EAAIpC,EAAAC,EAAAC,cAAA,MAAIG,UAAU,OAAO4B,KAAKhB,MAAME,OAAc,KAC7EnB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACZ4B,KAAKhB,MAAMC,KAAKmB,IAAI,SAAAxB,GAAI,OAAIb,EAAAC,EAAAC,cAACoC,EAAD,CAAMC,IAAK1B,EAAMA,KAAMA,eAjD5C2B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7b707858.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Inputer = ({ changeTextFn, hideFn, addFn, titleFn, ...props }) => (\r\n  <div disabled={props.off ? true : false} className=\"App\">\r\n    <input placeholder='Wpisz nazwÄ™ sprzetu' onChange={titleFn} />\r\n    <input placeholder='Wklej numery seryjne' type=\"text\" onChange={changeTextFn} value={props.text} />\r\n    <button onClick={addFn}>Dodaj</button>\r\n    <button onClick={hideFn}>Ukryj</button>\r\n  </div>\r\n)\r\n\r\nexport default Inputer;","import React, { Component } from 'react';\nimport './App.css';\nimport Inputer from './Inputer';\n\n\nconst Item = (props) => <p><span>{props.item}</span><span className=\"code\">{` `}{`*${props.item.toUpperCase()}*`}</span></p>\n\nclass App extends Component {\n  state = ({\n    text: '',\n    list: [],\n    off: false,\n    title: '',\n  })\n\n  handleButtonAdd = () => {\n    const lista = this.state.list;\n    const text = this.state.text;\n    const split = text.split(' ');\n\n    split.forEach(item => {\n      const tmp = item.split('\\t');\n      tmp.forEach(item => {\n        lista.push(item)\n      })\n    })\n\n    this.setState({\n      list: lista,\n    })\n  }\n\n  handleButtonHide = () => {\n    this.setState({\n      off: true,\n    })\n  }\n\n  handleChangeText = (e) => {\n    this.setState({\n      text: e.target.value,\n    })\n  }\n\n  handleChangeTitle = (e) => {\n    this.setState({\n      title: e.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {!this.state.off ? <Inputer {...this.state} changeTextFn={this.handleChangeText} hideFn={this.handleButtonHide} addFn={this.handleButtonAdd} titleFn={this.handleChangeTitle} /> : null}\n        {this.state.title.length > 0 ? <h2 className='App'>{this.state.title}</h2> : null}\n        <div className=\"table\">\n          {this.state.list.map(item => <Item key={item} item={item} />)}\n        </div>\n      </React.Fragment >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}